class Solution:
    def parseBoolExpr(self, expression: str) -> bool:
        stk = [] 
        for c in expression:
            if c != ')' and c != ',': 
                stk.append(c)  # Push valid characters to the stack
            elif c == ')':  
                exp = [] 
                while stk and stk[-1] != '(':
                    t = stk.pop()
                    exp.append(True if t == 't' else False)
                
                stk.pop()  
                if stk:
                    t = stk.pop()  # Get the operator before '('
                    v = exp[0] 
                    if t == '&':  # AND operation
                        for b in exp:
                            v &= b
                    elif t == '|':  # OR operation
                        for b in exp:
                            v |= b
                    else:  
                        v = not v
                    stk.append('t' if v else 'f')
        return stk[-1] == 't'
